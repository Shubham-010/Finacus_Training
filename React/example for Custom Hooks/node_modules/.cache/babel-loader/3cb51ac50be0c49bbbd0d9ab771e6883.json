{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback } from \"react\";\n\nconst useHttp = (requestConfig, applyData) => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const sendRequest = usecallback(async taskText => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(requestConfig.url, {\n        method: requestConfig.method ? requestConfig.method : 'GET',\n        header: requestConfig.header ? requestConfig.header : {},\n        body: requestConfig.body ? JSON.stringify(requestConfig.body) : null\n      });\n\n      if (!response.ok) {\n        throw new Error('Request failed!');\n      }\n\n      const data = await response.json();\n      applyData(data);\n    } catch (err) {\n      setError(err.message || 'Something went wrong!');\n    }\n\n    setIsLoading(false);\n  }, []);\n  return {\n    isLoading,\n    error,\n    sendRequest\n  };\n};\n\n_s(useHttp, \"vj++RuHna9NxFPGCY0p/mi1GZNM=\");\n\nexport default useHttp;","map":{"version":3,"sources":["C:/Users/Shubham/Desktop/Finacus_Training/React/example for Custom Hooks/src/Hooks/user-http.js"],"names":["useState","useCallback","useHttp","requestConfig","applyData","isLoading","setIsLoading","error","setError","sendRequest","usecallback","taskText","response","fetch","url","method","header","body","JSON","stringify","ok","Error","data","json","err","message"],"mappings":";;AACA,SAASA,QAAT,EAAkBC,WAAlB,QAAqC,OAArC;;AAGA,MAAMC,OAAO,GAAE,CAACC,aAAD,EAAgBC,SAAhB,KAA4B;AAAA;;AAIvC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AACF,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,IAAD,CAAlC;AAEA,QAAMS,WAAW,GAAGC,WAAW,CAAC,MAAOC,QAAP,IAAoB;AAClDL,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAI;AACF,YAAMI,QAAQ,GAAG,MAAMC,KAAK,CAC1BV,aAAa,CAACW,GADY,EACR;AACdC,QAAAA,MAAM,EAAEZ,aAAa,CAACY,MAAd,GAAuBZ,aAAa,CAACY,MAArC,GAA6C,KADvC;AAEdC,QAAAA,MAAM,EAAEb,aAAa,CAACa,MAAd,GAAuBb,aAAa,CAACa,MAArC,GAA8C,EAFxC;AAGdC,QAAAA,IAAI,EAACd,aAAa,CAACc,IAAd,GAAqBC,IAAI,CAACC,SAAL,CAAehB,aAAa,CAACc,IAA7B,CAArB,GAA2D;AAHlD,OADQ,CAA5B;;AASA,UAAI,CAACL,QAAQ,CAACQ,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AAED,YAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAT,EAAnB;AACAnB,MAAAA,SAAS,CAACkB,IAAD,CAAT;AAED,KAjBD,CAiBE,OAAOE,GAAP,EAAY;AACZhB,MAAAA,QAAQ,CAACgB,GAAG,CAACC,OAAJ,IAAe,uBAAhB,CAAR;AACD;;AACDnB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAxB8B,EAwB7B,EAxB6B,CAA/B;AAyBA,SAAM;AACFD,IAAAA,SADE;AAEFE,IAAAA,KAFE;AAGFE,IAAAA;AAHE,GAAN;AAMD,CAtCD;;GAAMP,O;;AAwCN,eAAeA,OAAf","sourcesContent":["\r\nimport { useState,useCallback } from \"react\";\r\n\r\n\r\nconst useHttp =(requestConfig, applyData)=>{\r\n\r\n\r\n\r\n    const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const sendRequest = usecallback(async (taskText) => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await fetch(\r\n        requestConfig.url,{\r\n            method: requestConfig.method ? requestConfig.method: 'GET',\r\n            header: requestConfig.header ? requestConfig.header : {},\r\n            body:requestConfig.body ? JSON.stringify(requestConfig.body) :  null,\r\n\r\n        }\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Request failed!');\r\n      }\r\n\r\n      const data = await response.json();\r\n      applyData(data);\r\n\r\n    } catch (err) {\r\n      setError(err.message || 'Something went wrong!');\r\n    }\r\n    setIsLoading(false);\r\n  },[]);\r\n  return{\r\n      isLoading,\r\n      error,\r\n      sendRequest\r\n\r\n  }\r\n};\r\n\r\nexport default useHttp;"]},"metadata":{},"sourceType":"module"}