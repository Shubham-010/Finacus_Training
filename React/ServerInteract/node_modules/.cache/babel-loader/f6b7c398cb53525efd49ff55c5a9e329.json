{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shubham\\\\Desktop\\\\Finacus_Training\\\\React\\\\ServerInteract\\\\src\\\\App.js\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport MoviesList from './components/MoviesList';\nimport './App.css';\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const fetchMovieHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch('https://swapi.dev/api/films/');\n\n      if (!response.ok) {\n        throw new Error('Something Went Wrong!!');\n      }\n\n      const data = await response.json();\n      const transformedMovies = data.results.map(movieData => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingT: movieData.opening_crawl,\n          releaseDate: movieData.release_date\n        };\n      });\n      setMovies(transformedMovies);\n      setIsLoading(false);\n    } catch (error) {\n      setError(error.message);\n    }\n\n    setIsLoading(false);\n  }, []);\n  useEffect(() => {\n    fetchMovieHandler();\n  }, [fetchMovieHandler]);\n  let content = /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 18\n    }\n  }, \"Found no movies\");\n\n  if (error) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }\n    }, error);\n  }\n\n  if (isLoading) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }\n    }, \"Its Loading\");\n  }\n\n  if (movies.length > 0) {\n    content = /*#__PURE__*/React.createElement(MoviesList, {\n      movies: movies,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchMovieHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, \"Fetch Movies\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, content));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Shubham/Desktop/Finacus_Training/React/ServerInteract/src/App.js"],"names":["React","useState","useEffect","useCallback","MoviesList","App","movies","setMovies","isLoading","setIsLoading","error","setError","fetchMovieHandler","response","fetch","ok","Error","data","json","transformedMovies","results","map","movieData","id","episode_id","title","openingT","opening_crawl","releaseDate","release_date","message","content","length"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAA0BC,SAA1B,EAAqCC,WAArC,QAAuD,OAAvD;AAEA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAO,WAAP;;AAEA,SAASC,GAAT,GAAe;AACf,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,KAAD,CAAlC;AAIE,QAAMW,iBAAiB,GAAGT,WAAW,CAAC,YAAS;AAC7CM,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAG;AACD,YAAME,QAAQ,GAAE,MAAMC,KAAK,CAAC,8BAAD,CAA3B;;AACA,UAAI,CAACD,QAAQ,CAACE,EAAd,EAAiB;AACf,cAAM,IAAIC,KAAJ,CAAU,wBAAV,CAAN;AACD;;AACH,YAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;AAGG,YAAMC,iBAAiB,GAAGF,IAAI,CAACG,OAAL,CAAaC,GAAb,CACxBC,SAAS,IAAI;AACX,eAAM;AACJC,UAAAA,EAAE,EAAED,SAAS,CAACE,UADV;AAEJC,UAAAA,KAAK,EAACH,SAAS,CAACG,KAFZ;AAGJC,UAAAA,QAAQ,EAAEJ,SAAS,CAACK,aAHhB;AAIJC,UAAAA,WAAW,EAAEN,SAAS,CAACO;AAJnB,SAAN;AAMD,OARuB,CAA1B;AAUAtB,MAAAA,SAAS,CAACY,iBAAD,CAAT;AACAV,MAAAA,YAAY,CAAC,KAAD,CAAZ;AAEF,KArBD,CAqBC,OAAMC,KAAN,EAAY;AACXC,MAAAA,QAAQ,CAACD,KAAK,CAACoB,OAAP,CAAR;AACD;;AACDrB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AAED,GA7BoC,EA6BlC,EA7BkC,CAArC;AA+BAP,EAAAA,SAAS,CAAC,MAAI;AACZU,IAAAA,iBAAiB;AAClB,GAFQ,EAEN,CAACA,iBAAD,CAFM,CAAT;AAIC,MAAImB,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAd;;AACC,MAAIrB,KAAJ,EAAU;AACRqB,IAAAA,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIrB,KAAJ,CAAV;AACD;;AACD,MAAGF,SAAH,EAAa;AACXuB,IAAAA,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAV;AACD;;AACD,MAAGzB,MAAM,CAAC0B,MAAP,GAAgB,CAAnB,EAAqB;AACnBD,IAAAA,OAAO,gBAAG,oBAAC,UAAD;AAAY,MAAA,MAAM,EAAEzB,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAV;AACD;;AACH,sBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,OAAO,EAAEM,iBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,CADF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGmB,OADH,CAJF,CADF;AAUD;;AAED,eAAe1B,GAAf","sourcesContent":["import React,{ useState , useEffect, useCallback} from 'react';\n\nimport MoviesList from './components/MoviesList';\nimport './App.css';\n\nfunction App() {\nconst [movies, setMovies] = useState([]);\nconst [isLoading, setIsLoading] = useState(false);\nconst [error, setError] = useState(false);\n\n\n\n  const fetchMovieHandler = useCallback(async()=>{\n    setIsLoading(true);\n    setError(null);\n    try{\n      const response= await fetch('https://swapi.dev/api/films/');\n      if (!response.ok){\n        throw new Error('Something Went Wrong!!');\n      }\n    const data = await response.json();\n\n    \n       const transformedMovies = data.results.map(\n         movieData => {\n           return{\n             id: movieData.episode_id,\n             title:movieData.title,\n             openingT: movieData.opening_crawl,\n             releaseDate: movieData.release_date\n           };\n         }\n       );\n       setMovies(transformedMovies);\n       setIsLoading(false);\n\n    }catch(error){\n      setError(error.message);\n    }\n    setIsLoading(false);\n\n  }, []);\n  \n  useEffect(()=>{\n    fetchMovieHandler();\n  }, [fetchMovieHandler]);\n\n   let content = <p>Found no movies</p>;\n    if (error){\n      content = <p>{error}</p>;\n    }\n    if(isLoading){\n      content = <p>Its Loading</p>;\n    }\n    if(movies.length > 0){\n      content = <MoviesList movies={movies}/>;\n    }\n  return (\n    <React.Fragment>\n      <section>\n        <button onClick={fetchMovieHandler}>Fetch Movies</button>\n      </section>\n      <section>\n        {content}\n      </section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}