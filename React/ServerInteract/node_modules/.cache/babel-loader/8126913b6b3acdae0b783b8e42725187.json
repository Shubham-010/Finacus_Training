{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shubham\\\\Desktop\\\\Finacus_Training\\\\React\\\\ServerInteract\\\\src\\\\App.js\";\nimport React, { useState } from 'react';\nimport MoviesList from './components/MoviesList';\nimport './App.css';\nimport MovieList from './components/MoviesList';\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  async function fetchMovieHandler() {\n    setIsLoading(true);\n\n    try {\n      const response = await fetch('https://swapi.dev/api/film/');\n\n      if (!response.ok) {\n        throw new Error('Something Went Wrong!!');\n      }\n\n      const data = await response.json();\n      const transformedMovies = data.results.map(movieData => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingT: movieData.opening_crawl,\n          releaseDate: movieData.release_date\n        };\n      });\n      setMovies(transformedMovies);\n      setIsLoading(false);\n    } catch (error) {\n      setError(error.message);\n    }\n\n    setIsLoading(false);\n  }\n\n  let content = /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 17\n    }\n  }, \"Found no movies\");\n\n  if (error) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }\n    }, error);\n  }\n\n  if (isLoading) {\n    /*#__PURE__*/\n    React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 7\n      }\n    }, \"Its Loading\");\n  }\n\n  if (movies.length > 0) {\n    content = /*#__PURE__*/React.createElement(MovieList, {\n      movies: movies,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchMovieHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, \"Fetch Movies\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, !isLoading && movies.length > 0 && /*#__PURE__*/React.createElement(MoviesList, {\n    movies: movies,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 44\n    }\n  }), !isLoading && movies.length === 0 && !error && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 56\n    }\n  }, \" Found no Movies\"), !isLoading && error && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 32\n    }\n  }, error), isLoading && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 22\n    }\n  }, \"Its Loading....\")));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Shubham/Desktop/Finacus_Training/React/ServerInteract/src/App.js"],"names":["React","useState","MoviesList","MovieList","App","movies","setMovies","isLoading","setIsLoading","error","setError","fetchMovieHandler","response","fetch","ok","Error","data","json","transformedMovies","results","map","movieData","id","episode_id","title","openingT","opening_crawl","releaseDate","release_date","message","content","length"],"mappings":"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","sourcesContent":["import React,{ useState} from 'react';\n\nimport MoviesList from './components/MoviesList';\nimport './App.css';\nimport MovieList from './components/MoviesList';\n\nfunction App() {\nconst [movies, setMovies] = useState([]);\nconst [isLoading, setIsLoading] = useState(false);\nconst [error, setError] = useState(false);\n\n  async function fetchMovieHandler(){\n    setIsLoading(true)\n    try{\n      const response= await fetch('https://swapi.dev/api/film/');\n      if (!response.ok){\n        throw new Error('Something Went Wrong!!');\n      }\n    const data = await response.json();\n\n    \n       const transformedMovies = data.results.map(\n         movieData => {\n           return{\n             id: movieData.episode_id,\n             title:movieData.title,\n             openingT: movieData.opening_crawl,\n             releaseDate: movieData.release_date\n           };\n         }\n       );\n       setMovies(transformedMovies);\n       setIsLoading(false);\n\n    }catch(error){\n      setError(error.message);\n    }\n    setIsLoading(false);\n\n  }\n  let content = <p>Found no movies</p>;\n    if (error){\n      content = <p>{error}</p>;\n    }\n    if(isLoading){\n      <p>Its Loading</p>;\n    }\n    if(movies.length > 0){\n      content = <MovieList movies={movies}/>;\n    }\n  return (\n    <React.Fragment>\n      <section>\n        <button onClick={fetchMovieHandler}>Fetch Movies</button>\n      </section>\n      <section>\n\n       {!isLoading && movies.length > 0 && <MoviesList movies={movies} />}\n       {!isLoading && movies.length === 0 && !error && <p> Found no Movies</p> }\n       {!isLoading && error && <p>{error}</p>}\n       {isLoading && <p>Its Loading....</p>}\n      </section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}